/***************************************************************************************************/
/***************************************************************************************************/
/************************* creator:Omar Ahmed ******************************************************/
/*************************  layer:MCAL *************************************************************/
/*************************    swc:EXTI   ************************************************************/

#include "std_types.h"
#include "bit_math.h"
#include "EXTI_Register.h"
#include "EXTI_Interface.h"
#include "EXTI_Private.h"
#include "EXTI_Config.h"

void EXTI_voidInt0Init(void){
SET_BIT(GICR,GICR_INT0);
/* set sense control for int0 to falling edge*\
SET_BIT(MCUCR,MCUCR_ISC01);
CLEAR_BIT(MCUCR,MCUCR_ISC00);

}
void EXTI_voidInt1Init(void){
SET_BIT(GICR,GICR_INT1);
/* set sense control for int1 to falling edge*\
SET_BIT(MCUCR,MCUCR_ISC11);
CLEAR_BIT(MCUCR,MCUCR_ISC10);

}
void EXTI_voidInt2Init(void){
SET_BIT(GICR,GICR_INT2);
}

u8 EXTI_u8DisableInterrupt(u8 Copy_IntNum){
u8 Local_u8ErrorState=OK;
if((Copy_IntNum>=INT2)&&(Copy_IntNum<=INT1)){
/*clear the interrupt number from register*/
CLEAR_BIT(GICR,Copy_IntNum);
}
else{
Local_u8ErrorState=NOK;
}

return Local_u8ErrorState;
}
u8 EXTI_u8EnableInterrupt(u8 Copy_IntNum){
u8 Local_u8ErrorState=OK;
if((Copy_IntNum>=INT2)&&(Copy_IntNum<=INT1)){
/*set the interrupt number from register*/
set_BIT(GICR,Copy_IntNum);
}
else{
Local_u8ErrorState=NOK;
}

return Local_u8ErrorState;
}
