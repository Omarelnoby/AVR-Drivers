/***************************************************************************************************/
/***************************************************************************************************/
/************************* creator:Omar Ahmed ******************************************************/
/*************************  layer:MCAL *************************************************************/
/*************************    swc:TWI  ************************************************************/

#include "std_types.h"
#include "bit_math.h"
#include "TWI_Register.h"
#include "TWI_Interface.h"
#include "TWI_Private.h"
#include "TWI_Config.h"


typedef enum{
NoError,
ErrorStartCondition,
ErrorRepStartCondition,
ErrorSlaveAddWithWrite,
ErrorSlaveAddWithRead,
ErrorMasterSendData,
ErrorMasterRecieveData,
ErrorStopCondition


}TWI_ErrState;
void TWI_voidMasterInit (u8 Copy_u8SlaveAddress){
/*set interrupt enable*/
SET_BIT(TWCR,TWCR_TWIE);
/*TWI enable*/
SET_BIT(TWCR,TWCR_TWEN);
/*set twi frequency*/
CLEAR_BIT(TWSR,TWSR_TWPS0);
CLEAR_BIT(TWSR,TWSR_TWPS1);
TWBR=0x02;
if(Copy_u8SlaveAddress!=0){
TWAR=Copy_u8SlaveAddress<<1;
}
}


void TWI_voidSlaveInit (u8 Copy_u8SlaveAddress){
TWAR=Copy_u8SlaveAddress<<1;
/*TWI enable*/
SET_BIT(TWCR,TWCR_TWEN);
}


TWI_ErrState TWI_SendStartCondition(void){
TWI_ErrState Local_ErrState=NoError;

/* send start condition*/
SET_BIT(TWCR,TWCR_TWSTA);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=START_ACK){
Local_ErrState=ErrorStartCondition;
}
return Local_ErrState;
}


TWI_ErrState TWI_SendRepeatedStart(void){
TWI_ErrState Local_ErrState=NoError;
/* send start condition*/
SET_BIT(TWCR,TWCR_TWSTA);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=REP_START_ACK){
Local_ErrState=ErrorRepStartCondition;
}
return Local_ErrState;
}


TWI_ErrState TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress){
TWI_ErrState Local_ErrState=NoError;
/* clear start condition*/
CLEAR_BIT(TWCR,TWCR_TWSTA);

/*set slave address*/
TWDR=Copy_u8SlaveAddress<<1;

/*set write operation*/
CLEAR_BIT(TWDR,0);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=SLAVE_ADD_AND_WR_ACK){
Local_ErrState=ErrorSlaveAddWithWrite;
}


return Local_ErrState;
}

TWI_ErrState TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress){
TWI_ErrState Local_ErrState=NoError;
/* clear start condition*/
CLEAR_BIT(TWCR,TWCR_TWSTA);

/*set slave address*/
TWDR=Copy_u8SlaveAddress<<1;

/*set read operation*/
SET_BIT(TWDR,0);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=SLAVE_ADD_AND_RD_ACK){
Local_ErrState=ErrorSlaveAddWithRead;

}
return Local_ErrState;
}



TWI_ErrState TWI_MasterSendData(u8 Copy_u8DataByte){
TWI_ErrState Local_ErrState=NoError;

/*send data*/
TWDR=Copy_u8DataByte;

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=MSTR_WR_BYTE_ACK){
Local_ErrState=ErrorMasterSendData;

}
return Local_ErrState;
}



TWI_ErrState TWI_MasterReadData(u8 *Copy_pu8DataByte){
TWI_ErrState Local_ErrState=NoError;

/*enable ack bit from master after recieving data*/
SET_BIT(TWCR,TWCR_TWEA);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);

/*wait for flag to be raised*/
while((GET_BIT(TWCR,TWCR_TWINT))==0);

/*check for status of the operation*/
if((TWSR&0b11111000)!=MSTR_RD_BYTE_ACK){
Local_ErrState=ErrorMasterRecieveData;

}
else{
/*recieve data*/
*Copy_pu8DataByte=TWDR;
}
return Local_ErrState;
}


void TWI_voidSendStopCondition(void){

/* send start condition*/
SET_BIT(TWCR,TWCR_TWSTO);

/*clearing flag by writing one on it*/
SET_BIT(TWCR,TWCR_TWINT);


}
